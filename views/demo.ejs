<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TOPSIS Calculation</title>
    <script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>
</head>
<body>

<!-- Decision Matrix -->
<div class="card-content" id="decision-matrix">
    <div class="content">
        <h2>Matriks Keputusan (X)</h2>
        <table class="table is-fullwidth is-hoverable">
            <thead>
                <tr>
                    <th>No</th>
                    <th>Nama</th>
                    <% kriteriaData.forEach(function(kriteria, index) { %>
                        <th>C<%= index + 1 %></th>
                    <% }) %>
                </tr>
            </thead>
            <tbody id="decisionMatrixBody"></tbody>
        </table>
    </div>
</div>

<!-- Normalized Matrix -->
<div class="card mt-4">
    <header class="card-header">
        <p class="card-header-title">Matriks Ternormalisasi (R)</p>
    </header>
    <div class="card-content" id="normalized-matrix">
        <div class="content">
            <table class="table is-fullwidth is-hoverable">
                <thead>
                    <tr>
                        <th>No</th>
                        <th>Nama</th>
                        <% kriteriaData.forEach(function(kriteria, index) { %>
                            <th>C<%= index + 1 %></th>
                        <% }) %>
                    </tr>
                </thead>
                <tbody id="normalizedMatrixBody"></tbody>
            </table>
        </div>
    </div>
</div>

<!-- Weighted Normalized Matrix -->
<div class="card mt-4">
    <header class="card-header">
        <p class="card-header-title">Matriks Ternormalisasi Terbobot (V)</p>
    </header>
    <div class="card-content" id="weighted-matrix">
        <div class="content">
            <table class="table is-fullwidth is-hoverable">
                <thead>
                    <tr>
                        <th>No</th>
                        <th>Nama</th>
                        <% kriteriaData.forEach(function(kriteria, index) { %>
                            <th>C<%= index + 1 %></th>
                        <% }) %>
                    </tr>
                </thead>
                <tbody id="weightedMatrixBody"></tbody>
            </table>
        </div>
    </div>
</div>

<!-- TOPSIS Calculation Result (Closeness Coefficient) -->
<div class="card mt-4">
    <header class="card-header">
        <p class="card-header-title">Hasil TOPSIS (Nilai Preferensi)</p>
    </header>
    <div class="card-content" id="topsis-result">
        <div class="content">
            <table class="table is-fullwidth is-hoverable">
                <thead>
                    <tr>
                        <th>No</th>
                        <th>Nama</th>
                        <th>Nilai Preferensi (V<sub>i</sub>)</th>
                    </tr>
                </thead>
                <tbody id="topsisResultBody"></tbody>
            </table>
        </div>
    </div>
</div>

<script>
// Static data for decision matrix (alternatives and criteria scores)
const penilaianData = [
    { nama: 'Egidius S Berek', kriteria_nilai: [0.7, 0.5, 0.3, 1.1, 1.1, 0.4] },
    { nama: 'Caytano Lopes', kriteria_nilai: [1, 1, 1, 5, 4, 3] },

];

// Static data for weights of the criteria
const bobotKriteria = [25, 15, 20, 10, 15, 15];

// Generate the Decision Matrix
const displayDecisionMatrix = () => {
    const tableBody = document.getElementById('decisionMatrixBody');
    penilaianData.forEach((row, index) => {
        const tr = document.createElement('tr');
        tr.innerHTML = `<td>${index + 1}</td><td>${row.nama}</td>` + 
                       row.kriteria_nilai.map(val => `<td>${val}</td>`).join('');
        tableBody.appendChild(tr);
    });
};

// Calculate and normalize the decision matrix
const calculateNormalizedMatrix = (data) => {
    const numberOfCriteria = data[0].kriteria_nilai.length;
    const divisors = Array(numberOfCriteria).fill(0);

    // Sum squares and calculate divisors for each criterion
    data.forEach(row => {
        row.kriteria_nilai.forEach((val, index) => {
            divisors[index] += Math.pow(val, 2);
        });
    });
    const sqrtDivisors = divisors.map(sum => Math.sqrt(sum));

    // Normalize each criterion value
    return data.map(row => {
        return {
            nama: row.nama,
            normalizedValues: row.kriteria_nilai.map((val, index) => (val / sqrtDivisors[index]).toFixed(6))
        };
    });
};

// Display the Normalized Matrix
const displayNormalizedMatrix = (normalizedData) => {
    const tableBody = document.getElementById('normalizedMatrixBody');
    normalizedData.forEach((row, index) => {
        const tr = document.createElement('tr');
        tr.innerHTML = `<td>${index + 1}</td><td>${row.nama}</td>` + 
                       row.normalizedValues.map(val => `<td>${val}</td>`).join('');
        tableBody.appendChild(tr);
    });
};

// Calculate the weighted normalized matrix
const calculateWeightedMatrix = (normalizedData, weights) => {
    return normalizedData.map(row => {
        return {
            nama: row.nama,
            weightedValues: row.normalizedValues.map((val, index) => (val * weights[index] / 100).toFixed(6))
        };
    });
};

// Display the Weighted Normalized Matrix
const displayWeightedMatrix = (weightedData) => {
    const tableBody = document.getElementById('weightedMatrixBody');
    weightedData.forEach((row, index) => {
        const tr = document.createElement('tr');
        tr.innerHTML = `<td>${index + 1}</td><td>${row.nama}</td>` + 
                       row.weightedValues.map(val => `<td>${val}</td>`).join('');
        tableBody.appendChild(tr);
    });
};

// Calculate the ideal best (A+) and ideal worst (A-) solutions
const calculateIdealSolutions = (weightedData) => {
    const numberOfCriteria = weightedData[0].weightedValues.length;
    const idealBest = Array(numberOfCriteria).fill(-Infinity);
    const idealWorst = Array(numberOfCriteria).fill(Infinity);

    weightedData.forEach(row => {
        row.weightedValues.forEach((val, index) => {
            val = parseFloat(val);
            idealBest[index] = Math.max(idealBest[index], val);
            idealWorst[index] = Math.min(idealWorst[index], val);
        });
    });

    return { idealBest, idealWorst };
};

// Calculate the distance from the ideal solutions
const calculateDistance = (weightedData, idealSolutions) => {
    const { idealBest, idealWorst } = idealSolutions;

    return weightedData.map(row => {
        let distanceToBest = 0;
        let distanceToWorst = 0;

        row.weightedValues.forEach((val, index) => {
            val = parseFloat(val);
            distanceToBest += Math.pow(val - idealBest[index], 2);
            distanceToWorst += Math.pow(val - idealWorst[index], 2);
        });

        return {
            nama: row.nama,
            distanceToBest: Math.sqrt(distanceToBest),
            distanceToWorst: Math.sqrt(distanceToWorst)
        };
    });
};

// Calculate the closeness coefficient (preference value)
const calculateClosenessCoefficient = (distances) => {
    return distances.map(row => {
        const preferenceValue = (row.distanceToWorst / (row.distanceToBest + row.distanceToWorst)).toFixed(6);
        return { nama: row.nama, preferenceValue };
    });
};

// Display the final result (Closeness Coefficient)
const displayTOPSISResult = (results) => {
    const tableBody = document.getElementById('topsisResultBody');
    results.forEach((row, index) => {
        const tr = document.createElement('tr');
        tr.innerHTML = `<td>${index + 1}</td><td>${row.nama}</td><td>${row.preferenceValue}</td>`;
        tableBody.appendChild(tr);
    });
};

// Full TOPSIS calculation flow
const runTOPSIS = () => {
    displayDecisionMatrix();
    const normalizedMatrix = calculateNormalizedMatrix(penilaianData);
    displayNormalizedMatrix(normalizedMatrix);

    const weightedMatrix = calculateWeightedMatrix(normalizedMatrix, bobotKriteria);
    displayWeightedMatrix(weightedMatrix);

    const idealSolutions = calculateIdealSolutions(weightedMatrix);
    const distances = calculateDistance(weightedMatrix, idealSolutions);

    const closenessCoefficients = calculateClosenessCoefficient(distances);
    displayTOPSISResult(closenessCoefficients);
};

// Run the TOPSIS calculation when the page loads
window.onload = runTOPSIS;
</script>

</body>
</html>
